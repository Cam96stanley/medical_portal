swagger: "2.0"
info:
  title: "Health Portal"
  description: >
    This is the backend API for the Chronic Care Medical Portal â€” a system designed to coordinate care between doctors and patients managing long-term conditions.


    - **Patients** can:
      - Track vitals (e.g., blood pressure, glucose)
      - Manage and view appointments
      - View their medications and diagnoses

    - **Doctors** can:
      - Add and update medications for their patients
      - Add diagnoses for specific patients
      - Review tracked vitals and appointment history

    Please refer to the data models and endpoint documentation for detailed request and response formats, field requirements, and validation rules.
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /login:
    post:
      tags:
        - User
      summary: Log in a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Login credentials
          description: Credentials used to log in a user
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: User logged in successfully
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              message: "User logged in successfully"
              token: ";lnnna;A;LSKND..."
              user:
                id: 1
                email: "jane.doe@example.com"
                name: "Jane Doe"
                role: "patient"
        400:
          description: Missing email or password
          examples:
            application/json:
              message: "Email and password are required"
        401:
          description: Invalid email or password
          examples:
            application/json:
              message: "Invalid email or password"
        500:
          description: Internal Server Error - Unexpected error occurred
          examples:
            application/json:
              message: "An unexpected error occurred"

  /users:
    post:
      tags:
        - User
      summary: Create a new user
      description: Registers a new patient or doctor user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object to create
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: User created successfully
          schema:
            $ref: "#/definitions/User"
          examples:
            application/json:
              id: 1
              name: "Jane Doe"
              email: "jane.doe@example.com"
        400:
          description: >
            Validation error (e.g., missing fields, invalid enum value, or missing dob for patient)
          examples:
            application/json:
              message: "Validation error"
              errors:
                role: ["Must be one of: patient, doctor"]
                dob: ["Date of birth is required for patients"]
        409:
          description: Email already exists
          examples:
            application/json:
              message: "A user with this email already exists"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "An unexpected error occured"
    get:
      tags:
        - User
      summary: Get all users
      description: Get information about all users, both patients and doctors.
      produces:
        - application/json
      responses:
        200:
          description: Users retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              - id: 1
                dob: "1985-02-16"
                email: "john.doe@test.com"
                name: "John Doe"
                role: "patient"
              - id: 2
                dob: null
                email: "dr.smith@test.com"
                name: "Dr. Jane Smith"
                role: "doctor"
        404:
          description: No users found
          examples:
            application/json:
              message: "No users found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "An unexpected error occured"

  /users/me:
    get:
      tags:
        - User
      summary: Get current user
      description: Get information about the currently logged in user
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: User retrieved successfully
          schema:
            $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              id: 1
              dob: "1985-02-16"
              email: "john.doe@test.com"
              name: "John Doe"
              role: "patient"
        401:
          description: Unauthorized
          examples:
            application/json:
              message: "Token is missing or invalid"
        404:
          description: User not found
          examples:
            application/json:
              message: "No user found"
        500:
          description: Internal Server Error - Unexpected error occurred
          examples:
            application/json:
              message: "An unexpected error occurred"

    patch:
      tags:
        - User
      summary: Update current user
      description: >
        Update a user's non-sensitive information.  
        **Do not** use this route to update passwords.  
        For password changes, use the `/users/me/password` route.

      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: Fields to update (excluding password)
          required: true
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        200:
          description: User updated successfully
          schema:
            $ref: "#/definitions/PublicUser"
        400:
          description: Validation error
          examples:
            application/json:
              message: "Date of birth is reuqired for patients"
        401:
          description: Unauthorized - Token missing or invalid
          examples:
            application/json:
              message: "Token is missing or invalid"
        404:
          description: User not found
          examples:
            application/json:
              message: "User not found"
        409:
          description: Email already in use
          examples:
            application/json:
              message: "Email already in use"
        500:
          description: Internal Server Error - Unexpected error occurred
          examples:
            application/json:
              message: "An unexpected error occurred"

  /diagnoses/{patient_id}:
    post:
      tags:
        - Diagnosis
      summary: Create a diagnosis for a user
      description: >
        Registers a diagnosis for a patient.

        **Roles allowed:** doctor
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: patient_id
          in: path
          required: true
          type: integer
          description: ID of the patient you are adding the diagnosis to
        - in: body
          name: diagnosis
          required: true
          description: Diagnosis object to create
          schema:
            $ref: "#/definitions/DiagnosisRequest"
      responses:
        201:
          description: User created successfully
          schema:
            $ref: "#/definitions/DiagnosisResponse"
          examples:
            application/json:
              id: 1
              created_at: "2025-06-17T18:50:54"
              diagnosis_code: "H52-0"
              diagnosis_date: "2024-10-10"
              diagnosis_name: "COPD"
              notes: "Patient has mild COPD symptoms"
              doctor:
                id: 1
                name: "Dr. John Smith"
              patient:
                id: 2
                name: "Jane Doe"
        400:
          description: Validation error - required fields are missing or invalid
          examples:
            application/json:
              message: "Validation error"
              errors:
                diagnosis_name: ["Missing data for required field"]
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: Patient not found - no user with the specified ID exists
          examples:
            application/json:
              message: "Patient not found"
        409:
          description: Diagnosis already exists for this patient
          examples:
            application/json:
              message: "This diagnosis already exists for this patient"
        500:
          description: Internal Server Error - Unexpected error occurred
          examples:
            application/json:
              message: "An unexpected error occurred"

  /diagnoses/patients/{diagnosis_name}:
    get:
      tags:
        - Diagnosis
      summary: Get patients with a specific diagnosis
      description: >
        Get active patients with a specific diagnosis that are attached to the currently logged in doctor.

        **Roles allowed:** doctor
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - name: diagnosis_name
          in: path
          required: true
          type: string
          description: Name of the diagnosis
      responses:
        200:
          description: Patients retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/PublicUser"
          examples:
            application/json:
              - id: 1
                name: "Jane Doe"
                email: "jane@example.com"
                role: "patient"
                dob: "1990-01-01"
                is_active: true
                archived_at: null
              - id: 2
                name: "Mark Smith"
                email: "mark@example.com"
                role: "patient"
                dob: "1985-09-15"
                is_active: true
                archived_at: null
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: No patients found with the given diagnosis
          examples:
            application/json:
              message: "No patients found with this diagnosis"
        500:
          description: Internal Server Error - Unexpected error occurred
          examples:
            application/json:
              message: "An unexpected error occurred"

  /medications/{patient_id}:
    post:
      tags:
        - Medication
      summary: Create medication for a patient
      description: >
        Registers a medication for a patient

        **Roles allowed:** doctor
      security:
        - bearerAuth: []
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: patient_id
          in: path
          required: true
          type: integer
          description: ID of the patient you are adding the medication to
        - in: body
          name: medication
          required: true
          description: Medication object to create
          schema:
            $ref: "#/definitions/MedicationRequest"
      responses:
        201:
          description: Medication created successfully
          schema:
            $ref: "#/definitions/MedicationResponse"
          examples:
            application/json:
              id: 1
              name: "Lisinopril"
              dosage: "2.5 mg"
              frequency: "QD"
              prescribed_by_name: "Dr. Jane Smith"
              active: true
              patient:
                id: 2
                name: "John Doe"
        400:
          description: Validation error
          examples:
            application/json:
              message: "No input data provided"
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: Patient not found
          examples:
            application/json:
              message: "Patient not found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error"

  /medications/patients/{patient_id}:
    get:
      tags:
        - Medication
      summary: Get all medications for a patient
      description: >
        Retrieves all medications for a patient

        **Roles allowed:** doctor
      security:
        - bearerAuth: []
      produces:
        - application/json
      responses:
        200:
          description: Medications retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/MedicationResponse"
          examples:
            application/json:
              - id: 1
                name: "Lisinopril"
                dosage: "2.5 mg"
                frequency: "QD"
                prescribed_by_name: "Dr. Jane Smith"
                active: true
                patient:
                  id: 2
                  name: "John Doe"
              - id: 2
                name: "Asprin"
                dosage: ".5 mg"
                frequency: "QD"
                prescribed_by_name: "Dr. Jane Smith"
                active: true
                patient:
                  id: 2
                  name: "John Doe"
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: Patient not found
          examples:
            application/json:
              message: "Patient not found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error"

  /medications/{medication_id}/patients/{patient_id}/deactivate:
    patch:
      tags:
        - Medication
      summary: Deactivate a medication for a specific patient
      description: >
        Deactivates a medication that was prescribed to a patient. Only the prescribing doctor can deactivate the medication. A deactivation reason is required when deactivating.
      security:
        - bearerAuth: []
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: patient_id
          in: path
          required: true
          description: ID of the patient
          type: integer
        - name: medication_id
          in: path
          required: true
          description: ID of the medication
          type: integer
        - name: body
          in: body
          required: true
          description: reason for medication deactivation
          schema:
            type: object
            required:
              - deactivation_reason
            properties:
              deactivation_reason:
                type: string
                example: "Patient no longer takes this"
      responses:
        200:
          description: Medication deactivated successfully
          examples:
            application/json:
              message: "Medication successfully deactivated"
        400:
          description: Bad request (e.g. already inactive or missing reason)
          examples:
            application/json:
              message: "Medication is already inactive"
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - not the prescribing doctor
          examples:
            application/json:
              message: "Not the prescribing doctor"
        404:
          description: Patient or medication not found
          examples:
            application/json:
              message: "Patient not found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error"

  /goals/{patient_id}:
    post:
      tags:
        - Goal
      summary: Create a goal for a patient
      description: >
        Create a goal for a patient. You must be logged in as a doctor to access this route.
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: patient_id
          in: path
          required: true
          description: The ID of the patient you are creating a goal for.
          type: integer
        - in: body
          name: goal
          required: true
          description: Goal object to create
          schema:
            $ref: "#/definitions/GoalRequest"
      responses:
        201:
          description: Medication created successfully
          schema:
            $ref: "#/definitions/GoalResponse"
          examples:
            application/json:
              id: 1
              title: "Walk 30 minutes daily"
              description: >
                "Patient should take a 30-minute walk every day to improve cardiovascular health"
              is_complete: false
              target_date: "2025-07-31"
              created_at: "2025-06-30T17:08:26"
        400:
          description: Validation error
          examples:
            application/json:
              message: "No input data provided"
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: Patient not found
          examples:
            application/json:
              message: "Patient not found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error"

    get:
      tags:
        - Goal
      summary: Get all goals for a patient
      description: >
        Get a list of all goals for the currently logged in doctors patients.
      security:
        - bearerAuth: []
      produces:
        - application/json
      parameters:
        - name: patient_id
          in: path
          required: true
          description: The ID of the patient you want to get the list of goals for.
          type: integer
      responses:
        200:
          description: List of goals for the patient
          schema:
            type: array
            items:
              $ref: "#/definitions/GoalResponse"
          examples:
            application/json:
              - id: 1
                title: "Walk 30-minutes daily"
                description: >
                  "Patient should take a 30-minute walk every day to improve cardiovascular health"
                is_complete: false
                target_date: "2025-07-30"
                created_at: "2025-06-30T17:08:26"
              - id: 2
                title: "Keep glucose below 200"
                description: >
                  "Patient should try to keep glucose below 200 to improve glucose"
                is_complete: false
                target_date: "2025-07-30"
                created_at: "2025-06-30T17:08:26"
        400:
          description: Validation error
          examples:
            application/json:
              message: "No input data provided"
        401:
          description: Unauthorized - user not logged in or token missing
          examples:
            application/json:
              message: "Authorization token is missing or invalid"
        403:
          description: Forbidden - user does not have doctor role
          examples:
            application/json:
              message: "doctor role required"
        404:
          description: Patient not found
          examples:
            application/json:
              message: "Patient not found"
        500:
          description: Internal server error
          examples:
            application/json:
              message: "Internal server error"

definitions:
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: string
      password:
        type: string

    required:
      - email
      - password

  LoginResponse:
    type: object
    properties:
      token:
        type: string
      message:
        type: string
      user:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          email:
            type: string
          role:
            type: string
            enum: [patient, doctor]
            description: >
              Date of birth is required for users with role "patient", optional for "doctor"

  User:
    type: object
    required:
      - id
      - name
      - email
      - password
      - role
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      password:
        type: string
      role:
        type: string
        enum: [patient, doctor]
        description: >
          Role can only be either "patient" or "doctor", no other values are accepted.
      dob:
        type: string
        format: date
        description: >
          Date of birth is required for users with role "patient", optional for "doctor"

  PublicUser:
    type: object
    required:
      - id
      - name
      - email
      - role
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      email:
        type: string
      role:
        type: string
        enum: [patient, doctor, admin]
        description: >
          Role must be either "patient", "doctor", or "admin"
      dob:
        type: string
        format: date
        description: >
          Date of birth is required for users with the role "patient", optional for "doctor"
      is_active:
        type: boolean
        description: >
          Defaults to true for active users
      archived_at:
        type: string | null
        format: date-time
        description: >
          Automatically is added when changing is_active to false

  UserUpdate:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      dob:
        type: string
        format: date
      role:
        type: string
        enum: [patient, doctor]
    example:
      name: "John Doe"
      email: "j.doe@example.com"
      dob: "1990-05-20"
      role: "patient"

  DiagnosisRequest:
    type: object
    required:
      - diagnosis_name
      - diagnosis_code
      - diagnosis_date
      - notes
    properties:
      diagnosis_name:
        type: string
        description: The name of the diagnosis (e.g. "COPD")
      diagnosis_code:
        type: string
        description: ICD-10 code or other classification (e.g. "H52-0")
        example: "H52-0"
      diagnosis_date:
        type: string
        format: date
        description: The date the diagnosis was made
        example: "2024-10-10"
      notes:
        type: string
        description: Additional notes or context about the diagnosis
        example: "Patient has mild COPD symptoms"

  MedicationRequest:
    type: object
    required:
      - name
      - dosage
      - frequency
    properties:
      name:
        type: string
        description: Name of the medication being added
        example: "Lisinopril"
      dosage:
        type: string
        description: Dosage of the medication being added
        example: "2.5 mg"
      frequency:
        type: string
        description: Frequency of the medication being added
        example: "QD"
      prescribed_by_name:
        type: string
        description: Optional, name of the doctor that prescribed the medication
        example: "Dr. Jane Smith"

  GoalRequest:
    type: object
    required:
      - title
      - description
      - target_date
    properties:
      title:
        type: string
      description:
        type: string
      target_date:
        type: string
        format: date

  GoalResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      target_date:
        type: string
        format: date
      created_at:
        type: string
        format: datetime
      is_complete:
        type: boolean

  DiagnosisResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      created_at:
        type: string
        format: date-time
      diagnosis_name:
        type: string
      diagnosis_code:
        type: string
      diagnosis_date:
        type: string
        format: date
      notes:
        type: string
      doctor:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
      patient:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string

  MedicationResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: "Lisinopril"
      dosage:
        type: string
        example: "2.5 mg"
      frequency:
        type: string
        example: "QD"
      prescribed_by_name:
        type: string
        example: "Dr. Jane Smith"
      active:
        type: boolean
        example: true
      patient:
        type: object
        properties:
          id:
            type: string
            format: int64
            example: 2
          name:
            type: string
            example: "John Doe"
